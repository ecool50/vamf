
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.15.0

#include <stan/model/model_header.hpp>

namespace model_vamf_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_vamf : public prob_grad {
private:
    int nvals;
    int L;
    int N;
    int G;
    vector<int> nn;
    vector<int> gg;
    vector_d y;
    double sw;
    double sv_rate;
    double ymn;
    vector<vector<int> > Z;
    vector_d Q;
    double b1_mn;
    double b1_sd;
    row_vector_d b0_mn;
public:
    model_vamf(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_vamf(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_vamf_namespace::model_vamf";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "nvals", "int", context__.to_vec());
        nvals = int(0);
        vals_i__ = context__.vals_i("nvals");
        pos__ = 0;
        nvals = vals_i__[pos__++];
        context__.validate_dims("data initialization", "L", "int", context__.to_vec());
        L = int(0);
        vals_i__ = context__.vals_i("L");
        pos__ = 0;
        L = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        validate_non_negative_index("nn", "nvals", nvals);
        context__.validate_dims("data initialization", "nn", "int", context__.to_vec(nvals));
        validate_non_negative_index("nn", "nvals", nvals);
        nn = std::vector<int>(nvals,int(0));
        vals_i__ = context__.vals_i("nn");
        pos__ = 0;
        size_t nn_limit_0__ = nvals;
        for (size_t i_0__ = 0; i_0__ < nn_limit_0__; ++i_0__) {
            nn[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("gg", "nvals", nvals);
        context__.validate_dims("data initialization", "gg", "int", context__.to_vec(nvals));
        validate_non_negative_index("gg", "nvals", nvals);
        gg = std::vector<int>(nvals,int(0));
        vals_i__ = context__.vals_i("gg");
        pos__ = 0;
        size_t gg_limit_0__ = nvals;
        for (size_t i_0__ = 0; i_0__ < gg_limit_0__; ++i_0__) {
            gg[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("y", "nvals", nvals);
        context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(nvals));
        validate_non_negative_index("y", "nvals", nvals);
        y = vector_d(static_cast<Eigen::VectorXd::Index>(nvals));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_i_vec_lim__ = nvals;
        for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
            y[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "sw", "double", context__.to_vec());
        sw = double(0);
        vals_r__ = context__.vals_r("sw");
        pos__ = 0;
        sw = vals_r__[pos__++];
        context__.validate_dims("data initialization", "sv_rate", "double", context__.to_vec());
        sv_rate = double(0);
        vals_r__ = context__.vals_r("sv_rate");
        pos__ = 0;
        sv_rate = vals_r__[pos__++];
        context__.validate_dims("data initialization", "ymn", "double", context__.to_vec());
        ymn = double(0);
        vals_r__ = context__.vals_r("ymn");
        pos__ = 0;
        ymn = vals_r__[pos__++];
        validate_non_negative_index("Z", "N", N);
        validate_non_negative_index("Z", "G", G);
        context__.validate_dims("data initialization", "Z", "int", context__.to_vec(N,G));
        validate_non_negative_index("Z", "N", N);
        validate_non_negative_index("Z", "G", G);
        Z = std::vector<std::vector<int> >(N,std::vector<int>(G,int(0)));
        vals_i__ = context__.vals_i("Z");
        pos__ = 0;
        size_t Z_limit_1__ = G;
        for (size_t i_1__ = 0; i_1__ < Z_limit_1__; ++i_1__) {
            size_t Z_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < Z_limit_0__; ++i_0__) {
                Z[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        validate_non_negative_index("Q", "N", N);
        context__.validate_dims("data initialization", "Q", "vector_d", context__.to_vec(N));
        validate_non_negative_index("Q", "N", N);
        Q = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("Q");
        pos__ = 0;
        size_t Q_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < Q_i_vec_lim__; ++i_vec__) {
            Q[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "b1_mn", "double", context__.to_vec());
        b1_mn = double(0);
        vals_r__ = context__.vals_r("b1_mn");
        pos__ = 0;
        b1_mn = vals_r__[pos__++];
        context__.validate_dims("data initialization", "b1_sd", "double", context__.to_vec());
        b1_sd = double(0);
        vals_r__ = context__.vals_r("b1_sd");
        pos__ = 0;
        b1_sd = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"nvals",nvals,1);
        check_greater_or_equal(function__,"L",L,1);
        check_greater_or_equal(function__,"N",N,1);
        check_less_or_equal(function__,"N",N,nvals);
        check_greater_or_equal(function__,"G",G,1);
        check_less_or_equal(function__,"G",G,nvals);
        for (int k0__ = 0; k0__ < nvals; ++k0__) {
            check_greater_or_equal(function__,"nn[k0__]",nn[k0__],1);
            check_less_or_equal(function__,"nn[k0__]",nn[k0__],N);
        }
        for (int k0__ = 0; k0__ < nvals; ++k0__) {
            check_greater_or_equal(function__,"gg[k0__]",gg[k0__],1);
            check_less_or_equal(function__,"gg[k0__]",gg[k0__],G);
        }
        check_greater_or_equal(function__,"sw",sw,0);
        check_greater_or_equal(function__,"sv_rate",sv_rate,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            for (int k1__ = 0; k1__ < G; ++k1__) {
                check_greater_or_equal(function__,"Z[k0__][k1__]",Z[k0__][k1__],0);
                check_less_or_equal(function__,"Z[k0__][k1__]",Z[k0__][k1__],1);
            }
        }
        check_greater_or_equal(function__,"Q",Q,0);
        check_less_or_equal(function__,"Q",Q,1);
        check_greater_or_equal(function__,"b1_sd",b1_sd,0);
        // initialize data variables
        validate_non_negative_index("b0_mn", "N", N);
        b0_mn = row_vector_d(static_cast<Eigen::VectorXd::Index>(N));
        stan::math::fill(b0_mn,DUMMY_VAR__);

        try {
            stan::math::assign(b0_mn, subtract(logit(transpose(Q)),(b1_mn * ymn)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        validate_non_negative_index("U", "L", L);
        validate_non_negative_index("U", "N", N);
        num_params_r__ += L * N;
        validate_non_negative_index("V_raw", "G", G);
        validate_non_negative_index("V_raw", "L", L);
        num_params_r__ += G * L;
        validate_non_negative_index("w_raw", "G", G);
        num_params_r__ += G;
        ++num_params_r__;
        validate_non_negative_index("sv", "L", L);
        num_params_r__ += L;
        validate_non_negative_index("b0_raw", "N", N);
        num_params_r__ += N;
        validate_non_negative_index("b1_raw", "N", N);
        num_params_r__ += N;
    }

    ~model_vamf() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("y0_raw")))
            throw std::runtime_error("variable y0_raw missing");
        vals_r__ = context__.vals_r("y0_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "y0_raw", "double", context__.to_vec());
        // generate_declaration y0_raw
        double y0_raw(0);
        y0_raw = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(y0_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y0_raw: ") + e.what());
        }

        if (!(context__.contains_r("U")))
            throw std::runtime_error("variable U missing");
        vals_r__ = context__.vals_r("U");
        pos__ = 0U;
        validate_non_negative_index("U", "L", L);
        validate_non_negative_index("U", "N", N);
        context__.validate_dims("initialization", "U", "matrix_d", context__.to_vec(L,N));
        // generate_declaration U
        matrix_d U(static_cast<Eigen::VectorXd::Index>(L),static_cast<Eigen::VectorXd::Index>(N));
        for (int j2__ = 0U; j2__ < N; ++j2__)
            for (int j1__ = 0U; j1__ < L; ++j1__)
                U(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(U);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable U: ") + e.what());
        }

        if (!(context__.contains_r("V_raw")))
            throw std::runtime_error("variable V_raw missing");
        vals_r__ = context__.vals_r("V_raw");
        pos__ = 0U;
        validate_non_negative_index("V_raw", "G", G);
        validate_non_negative_index("V_raw", "L", L);
        context__.validate_dims("initialization", "V_raw", "matrix_d", context__.to_vec(G,L));
        // generate_declaration V_raw
        matrix_d V_raw(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(L));
        for (int j2__ = 0U; j2__ < L; ++j2__)
            for (int j1__ = 0U; j1__ < G; ++j1__)
                V_raw(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(V_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable V_raw: ") + e.what());
        }

        if (!(context__.contains_r("w_raw")))
            throw std::runtime_error("variable w_raw missing");
        vals_r__ = context__.vals_r("w_raw");
        pos__ = 0U;
        validate_non_negative_index("w_raw", "G", G);
        context__.validate_dims("initialization", "w_raw", "vector_d", context__.to_vec(G));
        // generate_declaration w_raw
        vector_d w_raw(static_cast<Eigen::VectorXd::Index>(G));
        for (int j1__ = 0U; j1__ < G; ++j1__)
            w_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(w_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w_raw: ") + e.what());
        }

        if (!(context__.contains_r("sy")))
            throw std::runtime_error("variable sy missing");
        vals_r__ = context__.vals_r("sy");
        pos__ = 0U;
        context__.validate_dims("initialization", "sy", "double", context__.to_vec());
        // generate_declaration sy
        double sy(0);
        sy = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sy);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sy: ") + e.what());
        }

        if (!(context__.contains_r("sv")))
            throw std::runtime_error("variable sv missing");
        vals_r__ = context__.vals_r("sv");
        pos__ = 0U;
        validate_non_negative_index("sv", "L", L);
        context__.validate_dims("initialization", "sv", "vector_d", context__.to_vec(L));
        // generate_declaration sv
        vector_d sv(static_cast<Eigen::VectorXd::Index>(L));
        for (int j1__ = 0U; j1__ < L; ++j1__)
            sv(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sv);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sv: ") + e.what());
        }

        if (!(context__.contains_r("b0_raw")))
            throw std::runtime_error("variable b0_raw missing");
        vals_r__ = context__.vals_r("b0_raw");
        pos__ = 0U;
        validate_non_negative_index("b0_raw", "N", N);
        context__.validate_dims("initialization", "b0_raw", "row_vector_d", context__.to_vec(N));
        // generate_declaration b0_raw
        row_vector_d b0_raw(static_cast<Eigen::VectorXd::Index>(N));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            b0_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(b0_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b0_raw: ") + e.what());
        }

        if (!(context__.contains_r("b1_raw")))
            throw std::runtime_error("variable b1_raw missing");
        vals_r__ = context__.vals_r("b1_raw");
        pos__ = 0U;
        validate_non_negative_index("b1_raw", "N", N);
        context__.validate_dims("initialization", "b1_raw", "row_vector_d", context__.to_vec(N));
        // generate_declaration b1_raw
        row_vector_d b1_raw(static_cast<Eigen::VectorXd::Index>(N));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            b1_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(b1_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b1_raw: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ y0_raw;
        (void) y0_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            y0_raw = in__.scalar_constrain(lp__);
        else
            y0_raw = in__.scalar_constrain();

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  U;
        (void) U;  // dummy to suppress unused var warning
        if (jacobian__)
            U = in__.matrix_constrain(L,N,lp__);
        else
            U = in__.matrix_constrain(L,N);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  V_raw;
        (void) V_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            V_raw = in__.matrix_constrain(G,L,lp__);
        else
            V_raw = in__.matrix_constrain(G,L);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  w_raw;
        (void) w_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            w_raw = in__.vector_constrain(G,lp__);
        else
            w_raw = in__.vector_constrain(G);

        T__ sy;
        (void) sy;  // dummy to suppress unused var warning
        if (jacobian__)
            sy = in__.scalar_lb_constrain(0,lp__);
        else
            sy = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sv;
        (void) sv;  // dummy to suppress unused var warning
        if (jacobian__)
            sv = in__.vector_lb_constrain(0,L,lp__);
        else
            sv = in__.vector_lb_constrain(0,L);

        Eigen::Matrix<T__,1,Eigen::Dynamic>  b0_raw;
        (void) b0_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            b0_raw = in__.row_vector_constrain(N,lp__);
        else
            b0_raw = in__.row_vector_constrain(N);

        Eigen::Matrix<T__,1,Eigen::Dynamic>  b1_raw;
        (void) b1_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            b1_raw = in__.row_vector_constrain(N,lp__);
        else
            b1_raw = in__.row_vector_constrain(N);


        // transformed parameters
        T__ y0;
        (void) y0;  // dummy to suppress unused var warning

        stan::math::initialize(y0, DUMMY_VAR__);
        stan::math::fill(y0,DUMMY_VAR__);
        validate_non_negative_index("w", "G", G);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  w(static_cast<Eigen::VectorXd::Index>(G));
        (void) w;  // dummy to suppress unused var warning

        stan::math::initialize(w, DUMMY_VAR__);
        stan::math::fill(w,DUMMY_VAR__);
        validate_non_negative_index("V", "G", G);
        validate_non_negative_index("V", "L", L);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  V(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(L));
        (void) V;  // dummy to suppress unused var warning

        stan::math::initialize(V, DUMMY_VAR__);
        stan::math::fill(V,DUMMY_VAR__);
        validate_non_negative_index("b0", "N", N);
        Eigen::Matrix<T__,1,Eigen::Dynamic>  b0(static_cast<Eigen::VectorXd::Index>(N));
        (void) b0;  // dummy to suppress unused var warning

        stan::math::initialize(b0, DUMMY_VAR__);
        stan::math::fill(b0,DUMMY_VAR__);
        validate_non_negative_index("b1", "N", N);
        Eigen::Matrix<T__,1,Eigen::Dynamic>  b1(static_cast<Eigen::VectorXd::Index>(N));
        (void) b1;  // dummy to suppress unused var warning

        stan::math::initialize(b1, DUMMY_VAR__);
        stan::math::fill(b1,DUMMY_VAR__);


        try {
            stan::math::assign(y0, ((5 * y0_raw) + ymn));
            stan::math::assign(w, multiply(sw,w_raw));
            stan::math::assign(V, diag_post_multiply(V_raw,sv));
            stan::math::assign(b0, add(b0_mn,b0_raw));
            stan::math::assign(b1, add(b1_mn,multiply(b1_sd,b1_raw)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        if (stan::math::is_uninitialized(y0)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: y0";
            throw std::runtime_error(msg__.str());
        }
        for (int i0__ = 0; i0__ < G; ++i0__) {
            if (stan::math::is_uninitialized(w(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: w" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < L; ++i1__) {
                if (stan::math::is_uninitialized(V(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: V" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(b0(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b0" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(b1(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b1" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {
            {
                validate_non_negative_index("eta", "G", G);
                validate_non_negative_index("eta", "N", N);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  eta(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(N));
                (void) eta;  // dummy to suppress unused var warning

                stan::math::initialize(eta, DUMMY_VAR__);
                stan::math::fill(eta,DUMMY_VAR__);
                validate_non_negative_index("y_imp", "nvals", nvals);
                Eigen::Matrix<T__,Eigen::Dynamic,1>  y_imp(static_cast<Eigen::VectorXd::Index>(nvals));
                (void) y_imp;  // dummy to suppress unused var warning

                stan::math::initialize(y_imp, DUMMY_VAR__);
                stan::math::fill(y_imp,DUMMY_VAR__);


                lp_accum__.add(normal_log<propto__>(w_raw, 0, 1));
                lp_accum__.add(cauchy_log<propto__>(y0_raw, 0, 1));
                lp_accum__.add(cauchy_log<propto__>(b0_raw, 0, 1));
                lp_accum__.add(normal_log<propto__>(b1_raw, 0, 1));
                lp_accum__.add(cauchy_log<propto__>(sy, 0, 1));
                lp_accum__.add(gamma_log<propto__>(sv, 2, sv_rate));
                for (int l = 1; l <= L; ++l) {

                    lp_accum__.add(normal_log<propto__>(stan::model::rvalue(V_raw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "V_raw"), 0, 1));
                }
                for (int n = 1; n <= N; ++n) {

                    lp_accum__.add(normal_log<propto__>(stan::model::rvalue(U, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "U"), 0, 1));
                }
                stan::math::assign(eta, add(add(y0,rep_matrix(w,N)),multiply(V,U)));
                for (int val = 1; val <= nvals; ++val) {

                    stan::math::assign(get_base1_lhs(y_imp,val,"y_imp",1), get_base1(eta,get_base1(gg,val,"gg",1),get_base1(nn,val,"nn",1),"eta",1));
                }
                for (int n = 1; n <= N; ++n) {

                    lp_accum__.add(bernoulli_logit_log<propto__>(stan::model::rvalue(Z, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Z"), add(get_base1(b0,n,"b0",1),multiply(get_base1(b1,n,"b1",1),stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "eta")))));
                }
                lp_accum__.add(normal_log<propto__>(y, y_imp, sy));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("y0_raw");
        names__.push_back("U");
        names__.push_back("V_raw");
        names__.push_back("w_raw");
        names__.push_back("sy");
        names__.push_back("sv");
        names__.push_back("b0_raw");
        names__.push_back("b1_raw");
        names__.push_back("y0");
        names__.push_back("w");
        names__.push_back("V");
        names__.push_back("b0");
        names__.push_back("b1");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_vamf_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double y0_raw = in__.scalar_constrain();
        matrix_d U = in__.matrix_constrain(L,N);
        matrix_d V_raw = in__.matrix_constrain(G,L);
        vector_d w_raw = in__.vector_constrain(G);
        double sy = in__.scalar_lb_constrain(0);
        vector_d sv = in__.vector_lb_constrain(0,L);
        row_vector_d b0_raw = in__.row_vector_constrain(N);
        row_vector_d b1_raw = in__.row_vector_constrain(N);
        vars__.push_back(y0_raw);
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < L; ++k_0__) {
                vars__.push_back(U(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < L; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(V_raw(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(w_raw[k_0__]);
        }
        vars__.push_back(sy);
        for (int k_0__ = 0; k_0__ < L; ++k_0__) {
            vars__.push_back(sv[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(b0_raw[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(b1_raw[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        double y0(0.0);
        (void) y0;  // dummy to suppress unused var warning

        stan::math::initialize(y0, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(y0,DUMMY_VAR__);
        validate_non_negative_index("w", "G", G);
        vector_d w(static_cast<Eigen::VectorXd::Index>(G));
        (void) w;  // dummy to suppress unused var warning

        stan::math::initialize(w, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(w,DUMMY_VAR__);
        validate_non_negative_index("V", "G", G);
        validate_non_negative_index("V", "L", L);
        matrix_d V(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(L));
        (void) V;  // dummy to suppress unused var warning

        stan::math::initialize(V, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(V,DUMMY_VAR__);
        validate_non_negative_index("b0", "N", N);
        row_vector_d b0(static_cast<Eigen::VectorXd::Index>(N));
        (void) b0;  // dummy to suppress unused var warning

        stan::math::initialize(b0, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(b0,DUMMY_VAR__);
        validate_non_negative_index("b1", "N", N);
        row_vector_d b1(static_cast<Eigen::VectorXd::Index>(N));
        (void) b1;  // dummy to suppress unused var warning

        stan::math::initialize(b1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(b1,DUMMY_VAR__);


        try {
            stan::math::assign(y0, ((5 * y0_raw) + ymn));
            stan::math::assign(w, multiply(sw,w_raw));
            stan::math::assign(V, diag_post_multiply(V_raw,sv));
            stan::math::assign(b0, add(b0_mn,b0_raw));
            stan::math::assign(b1, add(b1_mn,multiply(b1_sd,b1_raw)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        vars__.push_back(y0);
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(w[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < L; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(V(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(b0[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(b1[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_vamf";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y0_raw";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= L; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "U" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= L; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "V_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sy";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sv" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y0";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= L; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "V" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y0_raw";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= L; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "U" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= L; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "V_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sy";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sv" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y0";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= L; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "V" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

}




#endif
